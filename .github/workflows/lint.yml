name: Code Quality Checks

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Install Node.js dependencies
      run: |
        npm install -g markdownlint-cli jsonlint yaml-lint
        
    - name: Run Python linters
      run: |
        echo "Running Black formatter check..."
        black --check --diff load_tests/
        
        echo "Running isort import sorting check..."
        isort --check-only --diff load_tests/
        
        echo "Running flake8 linting..."
        flake8 load_tests/
        
        echo "Running mypy type checking..."
        mypy load_tests/ --ignore-missing-imports
        
        echo "Running bandit security linting..."
        bandit -r load_tests/ -f json -o bandit-report.json
        
    - name: Run YAML linting
      run: |
        echo "Running yamllint..."
        yamllint .
        
    - name: Run JSON linting
      run: |
        echo "Running jsonlint..."
        jsonlint Dashboard/dashboard.json
        
    - name: Run Markdown linting
      run: |
        echo "Running markdownlint..."
        markdownlint *.md
        
    - name: Upload bandit security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report-python-${{ matrix.python-version }}
        path: bandit-report.json
        
    - name: Create failure summary
      if: failure()
      run: |
        echo "## üö® Code Quality Check Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please fix the linting issues and push your changes." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Local Testing" >> $GITHUB_STEP_SUMMARY
        echo "You can run these commands locally to check your code before pushing:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "make lint          # Run all linters" >> $GITHUB_STEP_SUMMARY
        echo "make format        # Format all code" >> $GITHUB_STEP_SUMMARY
        echo "pre-commit run --all-files  # Run pre-commit hooks" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Report success
      if: success()
      run: |
        echo "## ‚úÖ Code Quality Check Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All linting checks have passed successfully!" >> $GITHUB_STEP_SUMMARY

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        npm install -g markdownlint-cli
        
    - name: Run pre-commit
      run: |
        pre-commit run --all-files
        
    - name: Pre-commit summary
      if: always()
      run: |
        if [ "$?" -eq 0 ]; then
          echo "## ‚úÖ Pre-commit Hooks Passed" >> $GITHUB_STEP_SUMMARY
          echo "All pre-commit hooks executed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ö†Ô∏è Pre-commit Hooks Failed" >> $GITHUB_STEP_SUMMARY
          echo "Some pre-commit hooks failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
        fi
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  summary:
    name: Quality Gate
    needs: [lint, pre-commit, security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Lint job: ${{ needs.lint.result }}"
        echo "Pre-commit job: ${{ needs.pre-commit.result }}"
        echo "Security job: ${{ needs.security.result }}"
        
        if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.pre-commit.result }}" == "failure" ]]; then
          echo "‚ùå Quality gate failed - linting issues found"
          exit 1
        else
          echo "‚úÖ Quality gate passed - all checks successful"
        fi